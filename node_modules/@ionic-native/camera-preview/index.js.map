{"version":3,"sources":["../../../src/@ionic-native/plugins/camera-preview/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\n\r\nexport interface CameraPreviewDimensions {\r\n  /** The width of the camera preview, default to window.screen.width */\r\n  width?: number;\r\n\r\n  /** The height of the camera preview, default to window.screen.height */\r\n  height?: number;\r\n}\r\n\r\nexport interface CameraPreviewOptions {\r\n  /** The left edge in pixels, default 0 */\r\n  x?: number;\r\n\r\n  /** The top edge in pixels, default 0 */\r\n  y?: number;\r\n\r\n  /** The width in pixels, default window.screen.width */\r\n  width?: number;\r\n\r\n  /** The height in pixels, default window.screen.height */\r\n  height?: number;\r\n\r\n  /** Choose the camera to use 'front' or 'rear', default 'front' */\r\n  camera?: string;\r\n\r\n  /** Tap to take a photo, default true (picture quality by default : 85) */\r\n  tapPhoto?: boolean;\r\n\r\n  /** Preview box drag across the screen, default 'false' */\r\n  previewDrag?: boolean;\r\n\r\n  /** Preview box to the back of the webview (true => back, false => front) , default false */\r\n  toBack?: boolean;\r\n\r\n  /** Alpha channel of the preview box, float, [0,1], default 1 */\r\n  alpha?: number;\r\n}\r\n\r\nexport interface CameraPreviewPictureOptions {\r\n  /** The width in pixels, default 0 */\r\n  width?: number;\r\n  /** The height in pixels, default 0 */\r\n  height?: number;\r\n  /** The picture quality, 0 - 100, default 85 */\r\n  quality?: number;\r\n}\r\n\r\n/**\r\n * @beta\r\n * @name Camera Preview\r\n * @description\r\n * Showing camera preview in HTML\r\n *\r\n * Requires Cordova plugin: `https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview.git`. For more info, please see the [Cordova Camera Preview docs](https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview).\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { CameraPreview, CameraPreviewPictureOptions, CameraPreviewOptions, CameraPreviewDimensions } from '@ionic-native/camera-preview';\r\n *\r\n * constructor(private cameraPreview: CameraPreview) { }\r\n *\r\n * ...\r\n *\r\n * // camera options (Size and location). In the following example, the preview uses the rear camera and display the preview in the back of the webview\r\n * const cameraPreviewOpts: CameraPreviewOptions = {\r\n *   x: 0,\r\n *   y: 0,\r\n *   width: window.screen.width,\r\n *   height: window.screen.height,\r\n *   camera: 'rear',\r\n *   tapPhoto: true,\r\n *   previewDrag: true,\r\n *   toBack: true,\r\n *   alpha: 1\r\n * };\r\n *\r\n * // start camera\r\n * this.cameraPreview.startCamera(cameraPreviewOpts).then(\r\n *   (res) => {\r\n *     console.log(res)\r\n *   },\r\n *   (err) => {\r\n *     console.log(err)\r\n *   });\r\n *\r\n * // Set the handler to run every time we take a picture\r\n * this.cameraPreview.setOnPictureTakenHandler().subscribe((result) => {\r\n *   console.log(result);\r\n *   // do something with the result\r\n * });\r\n *\r\n *\r\n * // picture options\r\n * const pictureOpts: CameraPreviewPictureOptions = {\r\n *   width: 1280,\r\n *   height: 1280,\r\n *   quality: 85\r\n * }\r\n *\r\n * // take a picture\r\n * this.cameraPreview.takePicture(this.pictureOpts).then((imageData) => {\r\n *   this.picture = 'data:image/jpeg;base64,' + imageData;\r\n * }, (err) => {\r\n *   console.log(err);\r\n *   this.picture = 'assets/img/test.jpg';\r\n * });\r\n *\r\n *\r\n * // Switch camera\r\n * this.cameraPreview.switchCamera();\r\n *\r\n * // set color effect to negative\r\n * this.cameraPreview.setColorEffect('negative');\r\n *\r\n * // Stop the camera preview\r\n * this.cameraPreview.stopCamera();\r\n *\r\n * ```\r\n *\r\n * @interfaces\r\n * CameraPreviewOptions\r\n * CameraPreviewPictureOptions\r\n * CameraPreviewDimensions\r\n */\r\n@Plugin({\r\n  pluginName: 'CameraPreview',\r\n  plugin: 'cordova-plugin-camera-preview',\r\n  pluginRef: 'CameraPreview',\r\n  repo: 'https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview',\r\n  platforms: ['Android', 'iOS']\r\n})\r\n\r\nexport class CameraPreview extends IonicNativePlugin {\r\n\r\n  FOCUS_MODE = {\r\n    FIXED: 'fixed',\r\n    AUTO: 'auto',\r\n    CONTINUOUS: 'continuous', // IOS Only\r\n    CONTINUOUS_PICTURE: 'continuous-picture', // Android Only\r\n    CONTINUOUS_VIDEO: 'continuous-video', // Android Only\r\n    EDOF: 'edof', // Android Only\r\n    INFINITY: 'infinity', // Android Only\r\n    MACRO: 'macro' // Android Only\r\n  };\r\n\r\n  EXPOSURE_MODE = {\r\n    LOCK: 'lock', // IOS Only\r\n    AUTO: 'auto', // IOS Only\r\n    CONTINUOUS: 'continuous',\r\n    CUSTOM: 'custom'\r\n  };\r\n\r\n  FLASH_MODE = {\r\n    OFF: 'off',\r\n    ON: 'on',\r\n    AUTO: 'auto',\r\n    RED_EYE: 'red-eye',\r\n    TORCH: 'torch' // Android Only\r\n  };\r\n\r\n  COLOR_EFFECT = {\r\n    AQUA: 'aqua', // Android Only\r\n    BLACKBOARD: 'blackboard', // Android Only\r\n    MONO: 'mono',\r\n    NEGATIVE: 'negative',\r\n    NONE: 'none',\r\n    POSTERIZE: 'posterize',\r\n    SEPIA: 'sepia',\r\n    SOLARIZE: 'solarize', // Android Only\r\n    WHITEBOARD: 'whiteboard' // Android Only\r\n  };\r\n\r\n  CAMERA_DIRECTION = {\r\n    BACK: 'back',\r\n    FRONT: 'front'\r\n  };\r\n\r\n  /**\r\n   * Starts the camera preview instance.\r\n   * @param {CameraPreviewOptions} options\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 2\r\n  })\r\n  startCamera(options: CameraPreviewOptions): Promise<any> { return; }\r\n\r\n  /**\r\n   * Stops the camera preview instance. (iOS & Android)\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  stopCamera(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Switch from the rear camera and front camera, if available.\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  switchCamera(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Hide the camera preview box.\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  hide(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Show the camera preview box.\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  show(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Take the picture (base64)\r\n   * @param [options] {CameraPreviewPictureOptions} size and quality of the picture to take\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 2\r\n  })\r\n  takePicture(options?: CameraPreviewPictureOptions): Promise<any> { return; }\r\n\r\n  /**\r\n   *\r\n   * Set camera color effect.\r\n   * @static\r\n   * @param {string} effect name : 'none' (iOS & Android), 'aqua' (Android), 'blackboard' (Android), 'mono' (iOS & Android), 'negative' (iOS & Android), 'posterize' (iOS & Android), 'sepia' (iOS & Android), 'solarize' (Android) or 'whiteboard' (Android)\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 2\r\n  })\r\n  setColorEffect(effect: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Set the zoom (Android)\r\n   * @param [zoom] {number} Zoom value\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 2\r\n  })\r\n  setZoom(zoom?: number): Promise<any> { return; }\r\n\r\n  /**\r\n     * Get the maximum zoom (Android)\r\n     * @return {Promise<any>}\r\n     */\r\n  @Cordova()\r\n  getMaxZoom(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get current zoom (Android)\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getZoom(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Set the preview Size\r\n   * @param [dimensions] {CameraPreviewDimensions}\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 2\r\n  })\r\n  setPreviewSize(dimensions?: CameraPreviewDimensions): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get focus mode\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getFocusMode(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Set the focus mode\r\n   * @param [focusMode] {string} 'fixed', 'auto', 'continuous-picture', 'continuous-video' (iOS & Android), 'edof', 'infinity', 'macro' (Android Only)\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 2\r\n  })\r\n  setFocusMode(focusMode?: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get supported focus modes\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getSupportedFocusModes(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get the current flash mode\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getFlashMode(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Set the flashmode\r\n   * @param [flashMode] {string} 'off' (iOS & Android), 'on' (iOS & Android), 'auto' (iOS & Android), 'torch' (Android)\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 2\r\n  })\r\n  setFlashMode(flashMode?: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get supported flash modes\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getSupportedFlashModes(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get supported picture sizes\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getSupportedPictureSizes(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get exposure mode\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getExposureMode(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get exposure modes\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getExposureModes(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Set exposure mode\r\n   * @param [lock] {string}\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 2\r\n  })\r\n  setExposureMode(lock?: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get exposure compensation (Android)\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getExposureCompensation(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Set exposure compensation (Android)\r\n   * @param [exposureCompensation] {number}\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 2\r\n  })\r\n  setExposureCompensation(exposureCompensation?: number): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get exposure compensation range (Android)\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getExposureCompensationRange(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Set specific focus point. Note, this assumes the camera is full-screen.\r\n   * @param xPoint {number}\r\n   * @param yPoint {number}\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  tapToFocus(xPoint: number, yPoint: number): Promise<any> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}